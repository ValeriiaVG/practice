1) необходимо залогиниться
POST
http://116.203.27.46:5002/login
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.

===================
дальше все запросы требуют наличие токена.
===================

Решение:

var jsonData = JSON.parse(responseBody);
postman.setEnvironmentVariable("token", jsonData.token);


Задача 2

http://116.203.27.46:5002/user_info
req.
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
===================

Решение:

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Response to be JSON", function () {
    pm.response.to.be.json;
    });

var schema = {
    "type":"object",
    "properties": {
     "start_qa_salary":  {"type": "number"},
     "qa_salary_after_6_months": {"type": "number"},
     "qa_salary_after_12_months": {"type": "number"},
     "person": {
          "type":"object", 
           "properties": {
               "u_age": {"type":"number"},
                "u_name": {
                    "type":"array",
                    "item": {"type":"string"},
                    "item": {"type":"number"},
                    "item": {"type":"number"},
                    
                }
           }, "u_salary_1_5_year": {
               "type":"number"
           }

     }
    }
};

 pm.test("Checking JSON structure", function () {
    pm.response.to.have.jsonSchema(schema); 
 });  


pm.test("Checking Data format", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.person).to.be.an("object");
    pm.expect(jsonData.person.u_name).to.be.a("array");
    pm.expect(jsonData.person.u_name[0]).to.be.a("string");
    pm.expect(jsonData.person.u_name[1]).to.be.a("number");
    pm.expect(jsonData.person.u_name[2]).to.be.a("number");
    pm.expect(jsonData.person.u_age).to.be.a("number");
    pm.expect(jsonData.start_qa_salary).to.be.an("number");
    pm.expect(jsonData.qa_salary_after_6_months).to.be.an("number");
    pm.expect(jsonData.qa_salary_after_12_months).to.be.an("number");
    pm.expect(jsonData.person.u_salary_1_5_year).to.be.an("number");
});
console.log(pm.response.json());

pm.test("Multiplication is correct", function(){
     var jsonData = pm.response.json();
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary*2);
  pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary*2.9);
  pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.start_qa_salary*4); 
});


Задача 3

http://116.203.27.46:5002/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
4) проверить, что 2-й элемент массива salary больше 1-го и 0-го
===================


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Response to be JSON", function () {
    pm.response.to.be.json;
    });
var schema = {
    "type": "object",
    "properties": {
        "age": {"type": "number"},
       "name": { "type": "string"},
       "salary": {
            "type": "array",
            "item": {"type": "number"},
            "item": {"type": "string"},
            "item": {"type": "string"}
            
       }
    }
    
};
pm.test("Cheking Json structure", function () {
     pm.response.to.have.jsonSchema(schema); 
 });


pm.test("Cheking Data format", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.age).to.be.an("number");
    pm.expect(jsonData.name).to.be.a("string");
    pm.expect(jsonData.salary).to.be.an("array");
});

pm.test("Cheking multiplication", function(){
    var jsonData = pm.response.json();
    pm.expect(Number(jsonData.salary[1])).to.eql(jsonData.salary[0]*2);
     pm.expect(Number(jsonData.salary[2])).to.eql(jsonData.salary[0]*3); 
});

pm.test("Cheking salary[2]>salary[0]", function(){
    var jsonData = pm.response.json();
    pm.expect(Number(jsonData.salary[2])>jsonData.salary[0]).to.eql(true);
});
pm.test("Cheking salary[2]>salary[1]", function(){
    var jsonData = pm.response.json();
    pm.expect(jsonData.salary[2]>jsonData.salary[1]).to.eql(true);
});

console.log(pm.response.json());


Задача 4

http://116.203.27.46:5002/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Проверить что занчение поля name = значению переменной name из окружения
4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age

===================

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Response to be JSON", function () {
    pm.response.to.be.json;
    });

 var schema = {
     "type": "object",
     "properties": {
         "age": {"type": "string"},
         "family": {"type": "object",
         "properties": {
             "children": {"type": "array"},
             "item": {
                 "type": "string",
                 "type": "number"
                 },
             "item": {
                 "type": "string",
                 "type": "number"
                 }
         },
         "u_salary_1_5_year": {"type": "number"}
         },
         "name": {"type": "string"},
         "salary": {"type": "number"}
     }
 };
 
pm.test("Checking JSON structure", function(){
    pm.response.to.have.jsonSchema(schema)
});

 pm.test("Checking Data format", function () {
    var jsonData = pm.response.json();
    pm.expect(Number(jsonData.age)).to.be.a("number");
    pm.expect(jsonData.family).to.be.a("object");
    pm.expect(jsonData.family.children).to.be.an("array")
    pm.expect(jsonData.family.children[1][1]).to.be.a("number");
   pm.expect(jsonData.family.children[0][0]).to.be.a("string");
    pm.expect(jsonData.family.children[1][0]).to.be.a("string");
    pm.expect(jsonData.family.children[0][1]).to.be.a("number");
    pm.expect(jsonData.salary).to.be.a("number");
    pm.expect(jsonData.name).to.be.a("string");
    pm.expect(jsonData.family.u_salary_1_5_year).to.be.a("number");
});
//var jsonData = pm.response.json();
//pm.environment.set("name", jsonData.name);

pm.test("Cheking name is eql to envName", function(){
   let jsonDate = pm.response.json();
   let envName = pm.environment.get("name");
   pm.expect(jsonDate.name).to.eql(envName);
});

pm.test("Cheking age is eql to body_age", function(){
    let jsonDate = pm.response.json();  
    var request_data = request.data; 
    var body_age = request_data.age;
    pm.expect(jsonDate.age).to.eql(body_age);
});




